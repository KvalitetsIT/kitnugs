# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: BuildAndTestAndPush

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    timeout-minutes: 15

    steps:
  # Set docker image names.
    - name: Setup env variables
      run: |
        echo "DOCKER_SERVICE=kvalitetsit/kitnugs" >> $GITHUB_ENV
        echo "DOCKER_DOCUMENTATION=kvalitetsit/kitnugs-documentation" >> $GITHUB_ENV

    - uses: actions/checkout@v4

      # Fail if DOCKER_SERVICE is kithugs and repo is not kithugs. This step can be deleted once
    - name: Initial build
      run: ./build/failOnFirstBuild.sh  

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
      
    # Generate model and interfaces.
    - name: Generate model and API
      run: ./build/generate-models.sh

  # Tests
    - name: Restore dependencies
      run: dotnet restore KitNugs.sln

    - name: Build
      run: dotnet build --no-restore KitNugs.sln

    - name: UnitTests
      run: dotnet test --no-build --verbosity normal ./UnitTest/UnitTest.csproj

    - name: IntegrationTest
      run: dotnet test --no-build --verbosity normal ./IntegrationTest/IntegrationTest.csproj
  
  # Tag and push to dockerhub
    - name: Login to docker
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      
      # Build as documentation dockerimage  
    - name: Build documentation image
      run: ./build/build-documentation.sh ${{ env.DOCKER_DOCUMENTATION }}
      
      # Tag and push service image
    - name: Tag service dev docker image
      run: ./build/docker-tag.sh ${{ env.DOCKER_SERVICE }}:latest ${{ env.DOCKER_SERVICE }}:dev

    - name: Push service dev docker image
      run: ./build/docker-push.sh ${{ env.DOCKER_SERVICE }}:dev

    - name: Tag service git id docker image
      run: ./build/docker-tag.sh ${{ env.DOCKER_SERVICE }}:latest ${{ env.DOCKER_SERVICE }}:${{ github.sha }}

    - name: Push service git id docker image.
      run: ./build/docker-push.sh ${{ env.DOCKER_SERVICE }}:${{ github.sha }}
    
    # Tag and push documentation image.
    - name: Tag documentation dev docker image
      run: ./build/docker-tag.sh ${{ env.DOCKER_DOCUMENTATION }}:latest ${{ env.DOCKER_DOCUMENTATION }}:dev

    - name: Push documentation dev docker image
      run: ./build/docker-push.sh ${{ env.DOCKER_DOCUMENTATION }}:dev

    - name: Tag documentation git id docker image
      run: ./build/docker-tag.sh ${{ env.DOCKER_DOCUMENTATION }}:latest ${{ env.DOCKER_DOCUMENTATION }}:${{ github.sha }}

    - name: Push documentation git id docker image.
      run: ./build/docker-push.sh ${{ env.DOCKER_DOCUMENTATION }}:${{ github.sha }}

      # if below step is skipped this build is a tag build. Can be used for skipping other steps.
    - name: Is Tag Build
      id: tag
      if:  ${{ startsWith(github.ref, 'refs/tags/v') }}
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

      # Service image
    - name: Tag version service docker image
      if: ${{ steps.tag.conclusion != 'skipped' }}
      run: ./build/docker-tag.sh ${{ env.DOCKER_SERVICE }}:latest ${{ env.DOCKER_SERVICE }}:${{ steps.tag.outputs.VERSION }}

    - name: Push version service docker image.
      if: ${{ steps.tag.conclusion != 'skipped' }}
      run: ./build/docker-push.sh ${{ env.DOCKER_SERVICE }}:${{ steps.tag.outputs.VERSION }}

    - name: Push latest service docker image.
      if: ${{ steps.tag.conclusion != 'skipped' }}
      run: ./build/docker-push.sh ${{ env.DOCKER_SERVICE }}:latest
      
      # Documentation image.
    - name: Tag version documentation docker image
      if: ${{ steps.tag.conclusion != 'skipped' }}
      run: ./build/docker-tag.sh ${{ env.DOCKER_DOCUMENTATION }}:latest ${{ env.DOCKER_DOCUMENTATION }}:${{ steps.tag.outputs.VERSION }}

    - name: Push version documentation service docker image.
      if: ${{ steps.tag.conclusion != 'skipped' }}
      run: ./build/docker-push.sh ${{ env.DOCKER_DOCUMENTATION }}:${{ steps.tag.outputs.VERSION }}
        
    - name: Push latest documentation docker image.
      if: ${{ steps.tag.conclusion != 'skipped' }}
      run: ./build/docker-push.sh ${{ env.DOCKER_DOCUMENTATION }}:latest
      
        